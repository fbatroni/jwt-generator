/*eslint no-bitwise: "off"*/
/*eslint no-return-assign: "off"*/
/*eslint no-param-reassign: "off"*/
/*eslint no-ternary: "off"*/
/*eslint no-unused-expressions: ["error", { "allowTernary": true }]*/
"use strict";

/********************************************************************
 * Libraries - Why we need 'em
 ********************************************************************/

/** Centralized Configs */
const config = require('../config/config.js');
/** Controllable Log Levels */
const log = require('iphb-logs');

/********************************************************************
 * Main Exports
 ********************************************************************/

// TODO: Documentation
const role = {
  roles: config.roles,
  addRole: (roles, role) => roles |= role,
  removeRole: (roles, role) => roles &= ~role,
  hasRole: (roles, role) => roles & role
};

module.exports = role;

/********************************************************************
 * Tests
 ********************************************************************/

if (module.parent === null) {

  /** Enable Test Outpput */
  log.enable.tests = true;

  /** Establish some test roles */
  const _testRoles = {
    user: 1,
    client: 2,
    council_member: 4
  };

  /** Test user is somehow a GLG user AND a client */
  const _userWithUserAndClient = _testRoles.user | _testRoles.client;

  /** Test Role Examples */
  const _councilMembers = _testRoles.council_member;
  const _client = _testRoles.client;
  const _user = _testRoles.user;
  const _clientAndCouncilMember = _testRoles.client | _testRoles.council_member;

  /** Test various Scenario(s): hasRole */
  role.hasRole(_userWithUserAndClient, _user) ? log.success("hasRole") : log.fail("hasRole");
  role.hasRole(_userWithUserAndClient, _client) ? log.success("hasRole") : log.fail("hasRole");
  role.hasRole(_userWithUserAndClient, _user | _client) ? log.success("hasRole") : log.fail("hasRole");
  role.hasRole(_userWithUserAndClient, _clientAndCouncilMember) ? log.success("hasRole") : log.fail("hasRole");
  role.hasRole(_userWithUserAndClient, _councilMembers) ? log.fail("hasRole") : log.success("hasRole");

  /** Test various Scenario(s): removeRole */
  role.hasRole(role.removeRole(_userWithUserAndClient, _client), _user) ? log.success("removeRole") : log.fail("removeRole");
  role.hasRole(role.removeRole(_userWithUserAndClient, _client), _client) ? log.fail("removeRole") : log.success("removeRole");

  /** Test various Scenario(s): addRole */
  role.hasRole(role.addRole(_userWithUserAndClient, _user), _councilMembers) ? log.fail("addRole") : log.success("addRole");
  role.hasRole(role.addRole(_userWithUserAndClient, _councilMembers), _councilMembers) ? log.success("addRole") : log.fail("addRole");

}
