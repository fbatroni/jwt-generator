/*eslint no-bitwise: ["error", { "allow": ["~"] }] */
/*eslint no-implicit-coercion: [2, { "allow": ["!!", "~"] } ]*/
/*eslint no-process-env: "off"*/
"use strict";

/**
 * @function    _getRolesFromEnvironment
 * @description Allow a dynamic range of configurable bitmasks utilizing
 *              the Starphleet override system.  Developers can set roles
 *              for their app by creating variables like:
 *                  $prefix_$rollgroup_EXECUTE=1
 *                  $prefix_$rollgroup_WRITE=2
 *                  $prefix_$rollgroup_READ=4
 *
 *              For Example:
 *                  JWT_ROLE_GLG_USER=1
 *                  JWT_ROLE_GLG_COUNCILMEMBER=2
 *                  JWT_ROLE_GLG_CLIENT=4
 *
 *              The Prefix will be removed from the table returned
 * @param       {String}     prefix        Can change the prefix used to parse
 *                                         environment variables from the default
 *                                         which is "JWT_ROLE"
 * @param       {String}     group         Can optionally group ROLES in different
 *                                         groups extending the range from just
 *                                         64 to whatever number or variations
 *                                         we need
 * @return      {Object}                   ENUM'ish object with the bitmasks
 */
function getRolesFromEnvironment(prefix, group) {
  const variablePrefix = `${prefix}_` || "JWT_ROLE_";
  const groupPrefix = `${group}_` || "GLG";
  const roles = {};
  /** FIXME: Should be using REGEX's and ensuring the prefix and group are the
             start of the variable name.  But, meh.  I'll fix it when it's a
             problem */
  for (let variableName in process.env) {
    if (~variableName.toUpperCase().indexOf(variablePrefix.toUpperCase())) {
      const remainingName = variableName.replace(variablePrefix, "");
      if (~remainingName.toUpperCase().indexOf(groupPrefix.toUpperCase())) {
        const allThatIsLeft = remainingName.replace(groupPrefix, "");
        // const ucGroup = groupPrefix.toUpperCase();
        const ucRole = allThatIsLeft.toUpperCase();
        // roles[ucGroup] = roles[ucGroup] || {};
        roles[ucRole] = process.env[variableName];
      }
    }
  }
  return roles;
}

module.exports = { getRolesFromEnvironment };
