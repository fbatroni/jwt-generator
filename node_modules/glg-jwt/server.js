/*eslint guard-for-in: "off"*/
/*eslint no-ternary: "off"*/
/*eslint no-bitwise: "off"*/
/*eslint no-implicit-coercion: "off"*/
"use strict";

/********************************************************************
 * Logging
 ********************************************************************/

const config = require('./config/config.js');
const log = require('iphb-logs');

/** Respect Logging Configs */
log.enable.logging = config.enableLogging;
log.enable.debug = config.enableDebug;
log.enable.verbose = config.enableVerbose;

// XXX: A reminder to look at "TODO/XXX" tags and handle them before
// we are production ready
log.warn("Someone left dev code in a production release!!!!");

/********************************************************************
 * Libraries
 ********************************************************************/

/** Hookup Express */
const express = require('express');
const app = express();

/** Configure our body Parser */
const bodyParser = require('body-parser');
const cookieParser = require('cookie-parser');
app.use(cookieParser());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

/********************************************************************
 * Imports
 ********************************************************************/

const jwt = require('jsonwebtoken');
const fs = require('fs-promise');
const mustache = require('mustache');
const api = require('./lib/api.js');
const starphleet = api.starphleet;
const jwtutil = api.jwtutil;
const glgutil = api.glgutil;
const email = api.email;

/********************************************************************
 * Route Handlers
 ********************************************************************/

app.use('/npmdocs', express.static(`${__dirname}/npmdocs`));
app.use('/restdocs', express.static(`${__dirname}/restdocs`));
app.use('/js', express.static(`${__dirname}/public`));
app.use('/img', express.static(`${__dirname}/public`));
app.use('/css', express.static(`${__dirname}/public`));

/**
 * @apiDefine failed
 *
 * @apiError (5xx) {string} criticalError There was a critical server error
 * @apiErrorExample Error-Response (500):
 *      HTTP/1.1 500 Error
 *      {
 *        "error": "criticalError"
 *      }
 */

/**
 * @api {get} /diagnostic Starphleet Healthcheck
 * @apiGroup Healthcheck
 * @apiName diagnostic
 * @apiDescription A normal starphleet healthcheck
 * @apiSuccessExample {string} Success-Response (200):
 *      HTTP/1.1 200 Response
 *      Ok
 * @apiUse failed
 */
app.get('/diagnostic', (req, res) => res.status(200).end('OK'));
// XXX: Purge Headers URL
// app.get('/headers', (req, res) => res.status(200).json({ b: req.body, u: req.uri, h: req.headers, c: req.cookies }));
// app.post('/getToken', (req, res) => glgutil.getUsersPayload(req.body.emailAddress, req.body.url, config.jwtExpirationInSeconds)
//   .then(token => res.status(200).json(token))
//   .catch(e => res.status(403).json({ error: "Forbidden" })));
// return res.status(200).json(glgutil.getUsersPayload(req.body.emailAddress, req.body.url, config.jwtExpirationInSeconds));
/**
 * @api {post} /sendAuthEmail Send Email to user with tokenized login url
 * @apiGroup Example
 * @apiName sendAuthEmail
 * @apiParam {string} email         The email address of the person trying to login
 * @apiDescription Send an email with url payload to user for authorization to a service
 * @apiSuccessExample {json} Success-Response:
 *      HTTP/1.1 200 Ok
 *      {}
 * @apiError (4xx) invalidFormat Example API error
 * @apiErrorExample Error-Response (404):
 *      HTTP/1.1 404 Error
 *      {
 *        "error": "invalidFormat"
 *      }
 * @apiUse failed
 */
app.post('/sendAuthEmail', (req, res) => jwtutil.getRedirectUrlFromJWTCookie(req)
  .then(jwtpayload => jwtpayload.url.replace(/(&|\?)+jwt=.*?&/, "&"))
  .then(shouldnottaketwosteps => shouldnottaketwosteps.replace(/(&|\?)+jwt=.*?$/, ""))
  .then(url => `https://${req.hostname}${url}`)
  .then(url => glgutil.getUsersPayload(req.body.emailAddress, url, config.jwtExpirationInSeconds))
  .then(payload => {
    payload.toAddress = req.body.emailAddress;
    console.log(`${req.body.emailAddress}:${payload.token}`)
    return payload;
  })
  .then(payload => email.sendEmail(payload))
  .then(() => res.status(200).json({ success: "Email Sent" }))
  .catch(e => {
    console.error(`${req.body.emailAddress}`, e.message)
    res.status(403).json({ error: "Forbidden" })
  }));
/**
 * @api {get} /* Deliver the primary login page
 * @apiGroup Example
 * @apiName catchall
 * @apiDescription Deliver the login page from any url
 * @apiSuccessExample {html} Success-Response:
 *      HTTP/1.1 200 Ok
 *      <html>...</html>
 * @apiError (4xx) invalidFormat Example API error
 * @apiErrorExample Error-Response (404):
 *      HTTP/1.1 404 Error
 *      {
 *        "error": "invalidFormat"
 *      }
 * @apiUse failed
 */
/** TODO: Real docs */
app.get('*', (req, res) => starphleet.getValidatedRedirect(req, res)
  .then(url => jwt.sign({ url }, config.jwtSecret))
  .then(url => res.cookie(config.jwtRedirectCookieName, url, { httpOnly: true }))
  .then(() => fs.readFile(`./public/login.html`, { encoding: 'utf8' }))
  .then(indexPage => mustache.render(indexPage, config))
  .then(indexPage => res.status(401).end(indexPage))
  .catch(() => res.status(403).json({ error: "Forbidden" })));

// ***********************************************************************
// Start the Express Server
// ***********************************************************************
// Start your engines...
const server = app.listen(config.serverPort, () => {
  const host = server.address().address;
  const port = server.address().port;
  // Let the user know we're listening
  log.info('Express listening at http://' + host + ":" + port);
});
