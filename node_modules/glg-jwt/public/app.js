/*eslint-env browser */
/*eslint no-undef: "off"*/
/*eslint no-ternary: "off"*/
"use strict";

const gid = document.getElementById.bind(document);
const ISERROR = true;

gid('submitEmail').addEventListener('click', e => {
  e.preventDefault();
  const emailAddress = gid('emailAddress').value
  _http(`${config.authServer}`, JSON.stringify({ emailAddress }))
    // .then(r => JSON.parse(r))
    // .then(r => `Login <a href="${r.urlWithToken}">here</a>`)
    .then(() => _displayMessage("Please Check Your Email"))
    .catch(e => {
      _displayMessage("Unable to Login", ISERROR);
    });
});

const isElementHidden = element => ~element.className.indexOf("hidden");

const _displayMessage = (message, isError) => {
  const _errorMessage = gid('errorMessage');
  const _successMessage = gid('successMessage');
  const _submitEmail = gid('submitEmail');
  if (isError) {
    _errorMessage.innerHTML = message;
    _errorMessage.className = _errorMessage.className.replace(/ hidden/, "");
  } else {
    if (!isElementHidden(_errorMessage)) {
      _errorMessage.className += " hidden";
    }
    if (!isElementHidden(_submitEmail)) {
      _submitEmail.className += " hidden";
    }
    _successMessage.className = _successMessage.className.replace(/ hidden/, "");
  }
};

const _http = (url, data) => new Promise((resolve, reject) => {
  const _requestType = data ? "POST" : "GET";
  const _request = new XMLHttpRequest();
  _request.open(_requestType, url, true);
  _request.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
  _request.onreadystatechange = () => {
    if (_request.readyState !== 4) {
      return;
    }
    if (_request.readyState === 4 && _request.status > 299) {
      reject(`Request Error: ${_request.status}`);
    }
    return resolve(_request.responseText);
  };
  _request.send(data);
});
